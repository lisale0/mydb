package formatter

import (
	"bytes"
	"github.com/lisale0/mydb/executor"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestReadHeader(t *testing.T) {
	/*
		00000000  3a 7b 22 56 65 72 73 69  6f 6e 22 3a 31 2c 22 4e  |:{"Version":1,"N|
		00000010  75 6d 52 6f 77 73 22 3a  31 30 32 34 2c 22 43 6f  |umRows":1024,"Co|
		00000020  6c 75 6d 6e 4e 61 6d 65  73 22 3a 5b 22 69 64 22  |lumnNames":["id"|
		00000030  2c 22 67 65 6e 64 65 72  22 5d 7d                 |,"gender"]}|
	*/
	bytesToRead := []byte{
		0x3a, 0x7b, 0x22, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x4e, 0x75,
		0x6d, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x3a, 0x31, 0x30, 0x32, 0x34, 0x2c, 0x22, 0x43, 0x6f, 0x6c,
		0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x69, 0x64, 0x22, 0x2c,
		0x22, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x5d, 0x7d,
	}
	buf := bytes.NewBuffer(bytesToRead)
	fileScanner := NewFileScanner(buf)

	err := fileScanner.ReadHeader()
	if err != nil {
		assert.Error(t, err)
	}
	assert.Equal(t, fileScanner.header.Version, 1)
	assert.Equal(t, fileScanner.header.NumRows, 1024)
}

func TestReadTuple(t *testing.T) {
	/*
		00000000  3a 7b 22 56 65 72 73 69  6f 6e 22 3a 31 2c 22 4e  |:{"Version":1,"N|
		00000010  75 6d 52 6f 77 73 22 3a  31 30 32 34 2c 22 43 6f  |umRows":1024,"Co|
		00000020  6c 75 6d 6e 4e 61 6d 65  73 22 3a 5b 22 69 64 22  |lumnNames":["id"|
		00000030  2c 22 67 65 6e 64 65 72  22 5d 7d 08 73 74 75 64  |,"gender"]}.stud|
		00000040  65 6e 74 31 04 6d 61 6c  65 08 73 74 75 64 65 6e  |ent1.male.studen|
		00000050  74 32 06 66 65 6d 61 6c  65 08 73 74 75 64 65 6e  |t2.female.studen|
		00000060  74 33 06 66 65 6d 61 6c  65                       |t3.female|
	*/
	bytesToRead := []byte{
		0x3a, 0x7b, 0x22, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x4e, 0x75,
		0x6d, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x3a, 0x31, 0x30, 0x32, 0x34, 0x2c, 0x22, 0x43, 0x6f, 0x6c,
		0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x69, 0x64, 0x22, 0x2c,
		0x22, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x5d, 0x7d, 0x08, 0x73, 0x74, 0x75, 0x64,
		0x65, 0x6e, 0x74, 0x31, 0x04, 0x6d, 0x61, 0x6c, 0x65, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
		0x74, 0x32, 0x06, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
		0x74, 0x33, 0x06, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65,
	}
	buf := bytes.NewBuffer(bytesToRead)
	fileScanner := NewFileScanner(buf)
	var tuple executor.Tuple
	tupleExists, _ := fileScanner.Next()
	if tupleExists {
		tuple = fileScanner.Execute()
	}
	assert.Equal(t, tuple.Values[0].Name, "id")
	assert.Equal(t, tuple.Values[0].StringValue, "student1")
}
